name: Codestyle and Unittest
on:
  push:
    branches:
      - '*'
      - '!master'
    paths:
      - "**.php"
  pull_request:

jobs:
  phplint:
    name: PHP Lint
    runs-on: ubuntu-20.04

    steps:
      - uses: actions/checkout@v4.2.2

      - name: Validate composer.json and composer.lock
        run: composer validate --strict

      - name: Cache Composer packages
        id: composer-cache
        uses: actions/cache@v4
        with:
          path: vendor
          key: ${{ runner.os }}-php-${{ hashFiles('**/composer.lock') }}
          restore-keys: |
            ${{ runner.os }}-php-

      - name: Install dependencies
        run: composer install --prefer-dist --no-progress

      - name: Run PHP Linter
        run: composer run-script phplint

  phpstan:
    name: PHP Stan
    runs-on: ubuntu-20.04

    steps:
      - uses: actions/checkout@v4.2.2

      - name: Validate composer.json and composer.lock
        run: composer validate --strict

      - name: Cache Composer packages
        id: composer-cache
        uses: actions/cache@v4
        with:
          path: vendor
          key: ${{ runner.os }}-php-${{ hashFiles('**/composer.lock') }}
          restore-keys: |
            ${{ runner.os }}-php-

      - name: Install dependencies
        run: composer install --prefer-dist --no-progress

      - name: Run PHP Stan
        run: composer run-script phpstan

  phpcs:
    name: PHP CodeSniffer
    runs-on: ubuntu-20.04

    steps:
      - uses: actions/checkout@v4.2.2

      - name: Validate composer.json and composer.lock
        run: composer validate --strict

      - name: Cache Composer packages
        id: composer-cache
        uses: actions/cache@v4
        with:
          path: vendor
          key: ${{ runner.os }}-php-${{ hashFiles('**/composer.lock') }}
          restore-keys: |
            ${{ runner.os }}-php-

      - name: Install dependencies
        run: composer install --prefer-dist --no-progress

      - name: Run PHP Codesniffer
        run: composer run-script phpcs

  phpunit:
    name: PHP Unit Test
    needs:
      - phplint
      - phpstan
      - phpcs
    runs-on: ubuntu-20.04

    steps:
      - uses: actions/checkout@v4.2.2

      - name: Validate composer.json and composer.lock
        run: composer validate --strict

      - name: Cache Composer packages
        id: composer-cache
        uses: actions/cache@v4
        with:
          path: vendor
          key: ${{ runner.os }}-php-${{ hashFiles('**/composer.lock') }}
          restore-keys: |
            ${{ runner.os }}-php-

      - name: Install dependencies
        run: composer install --prefer-dist --no-progress

      - name: Run PHP Unit Test
        run: composer run-script unittest

  phpfunctional:
    name: PHP Functional Test
    needs:
      - phplint
      - phpstan
      - phpcs
    runs-on: ubuntu-20.04

    services:
      database-testing:
        image: mariadb:latest
        ports:
          - 3306:3306
        env:
          MYSQL_ROOT_PASSWORD: root
          MYSQL_DATABASE: db
          MYSQL_USER: dev
          MYSQL_PASSWORD: dev
          options: --health-cmd="healthcheck.sh --connect --innodb_initialized" --health-interval=10s --health-timeout=5s --health-retries=3
    steps:
      - uses: actions/checkout@v4.2.2

      - name: Install PHP with extensions.
        uses: shivammathur/setup-php@v2
        with:
          php-version: 8.3
          extensions: pdo, pdo_sqlite
          ini-values: date.timezone='UTC'
      - name: Validate composer.json and composer.lock
        run: composer validate --strict

      - name: Cache Composer packages
        id: composer-cache
        uses: actions/cache@v4
        with:
          path: vendor
          key: ${{ runner.os }}-php-${{ hashFiles('**/composer.lock') }}
          restore-keys: |
            ${{ runner.os }}-php-

      - name: Install dependencies
        run: composer install --prefer-dist --no-progress

      - name: Verify MariaDB connection
        env:
          PORT: ${{ job.services.mariadb.ports[3306] }}
        run: |
          while ! mysqladmin ping -h"127.0.0.1" -P"$PORT" --silent; do
            sleep 1
          done
      - name: Run PHP Unit Test
        run: composer run-script functionaltest
